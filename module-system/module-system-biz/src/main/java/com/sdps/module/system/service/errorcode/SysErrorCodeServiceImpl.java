package com.sdps.module.system.service.errorcode;

import java.util.Date;
import java.util.List;
import java.util.Map;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import cn.hutool.core.collection.CollUtil;

import com.sdps.common.util.collection.CollectionUtils;
import com.sdps.module.system.api.errorcode.dto.ErrorCodeAutoGenerateReqDTO;
import com.sdps.module.system.api.errorcode.dto.ErrorCodeRespDTO;
import com.sdps.module.system.convert.errorcode.SysErrorCodeConvert;
import com.sdps.module.system.dal.dataobject.errorcode.ErrorCodeDO;
import com.sdps.module.system.dal.mapper.errorcode.SysErrorCodeMapper;
import com.sdps.module.system.enums.errorcode.ErrorCodeTypeEnum;

/**
 * 错误码 Service 实现类
 *
 * @author dlyan
 */
@Service
@Validated
@Slf4j
public class SysErrorCodeServiceImpl implements SysErrorCodeService {

	@Autowired
	private SysErrorCodeMapper errorCodeMapper;

	@Override
	@Transactional
	public void autoGenerateErrorCodes(
			List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs) {
		if (CollUtil.isEmpty(autoGenerateDTOs)) {
			return;
		}
		// 获得错误码
		List<ErrorCodeDO> errorCodeDOs = errorCodeMapper
				.selectListByCodes(CollectionUtils.convertSet(autoGenerateDTOs,
						ErrorCodeAutoGenerateReqDTO::getCode));
		Map<Integer, ErrorCodeDO> errorCodeDOMap = CollectionUtils.convertMap(
				errorCodeDOs, ErrorCodeDO::getCode);

		// 遍历 autoGenerateBOs 数组，逐个插入或更新。考虑到每次量级不大，就不走批量了
		autoGenerateDTOs.forEach(autoGenerateDTO -> {
			ErrorCodeDO errorCodeDO = errorCodeDOMap.get(autoGenerateDTO
					.getCode());
			// 不存在，则进行新增
				if (errorCodeDO == null) {
					errorCodeDO = SysErrorCodeConvert.INSTANCE
							.convert(autoGenerateDTO);
					errorCodeDO.setType(ErrorCodeTypeEnum.AUTO_GENERATION
							.getType());
					errorCodeMapper.insert(errorCodeDO);
					return;
				}
				// 存在，则进行更新。更新有三个前置条件：
				// 条件 1. 只更新自动生成的错误码，即 Type 为
				// ErrorCodeTypeEnum.AUTO_GENERATION
				if (!ErrorCodeTypeEnum.AUTO_GENERATION.getType().equals(
						errorCodeDO.getType())) {
					return;
				}
				// 条件 2. 分组 applicationName 必须匹配，避免存在错误码冲突的情况
				if (!autoGenerateDTO.getApplicationName().equals(
						errorCodeDO.getApplicationName())) {
					log.error(
							"[autoGenerateErrorCodes][自动创建({}/{}) 错误码失败，数据库中已经存在({}/{})]",
							autoGenerateDTO.getCode(),
							autoGenerateDTO.getApplicationName(),
							errorCodeDO.getCode(),
							errorCodeDO.getApplicationName());
					return;
				}
				// 条件 3. 错误提示语存在差异
				if (autoGenerateDTO.getMessage().equals(
						errorCodeDO.getMessage())) {
					return;
				}
				// 最终匹配，进行更新
				ErrorCodeDO obj = new ErrorCodeDO();
				obj.setId(errorCodeDO.getId());
				obj.setMessage(autoGenerateDTO.getMessage());
				errorCodeMapper.updateById(obj);
			});
	}

	@Override
	public List<ErrorCodeRespDTO> getErrorCodeList(String applicationName,
			Date minUpdateTime) {
		List<ErrorCodeDO> errorCodeDOs = errorCodeMapper
				.selectListByApplicationNameAndUpdateTimeGt(applicationName,
						minUpdateTime);
		return SysErrorCodeConvert.INSTANCE.convertList03(errorCodeDOs);
	}

}
